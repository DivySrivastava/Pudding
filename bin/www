#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('spruce:server');
const http = require('http');
const nconf = require('nconf');
nconf
  .argv()
  .env('__')
  .defaults({
    conf: `${__dirname}/../config.json`,
    'NODE_ENV': 'development'
  });
nconf.file(nconf.get('conf'));

/**
 * Get port from environment and store in Express.
 */

const port = app.get('port') || nconf.get('port');
if (!port) {
  debug('Missing PORT parameter');
  process.exit(1);
}

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Include Socket.IO.
 */
require('../namespace/chat')(nconf.get(), server);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      debug(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      debug(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
